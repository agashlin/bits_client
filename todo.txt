--- In-process ---
Testing:
- tests for commands (many of these should probably be default skip)
- HTTP server for the full effect? (to avoid depending on an external one,
  and to be able to fail controlledly)
  - HTTP proxy?
  - proxy detection?
  - use existing test infra for this

Support crates:
- split out?
- publish?
- signing?
- license?
- wio?

Misc:
- maybe convert all Windows stuff to some kind of wide string type instead of having
  OsStr/OsString everywhere?

Priority:
- look into the defaults
  - bits: when and on what connection it should run (metered? maybe different when background
    vs foreground?)

Notify callbacks:
- MTA in Firefox...

--- Later ---
- command line completion when not running
  - this should probably just be a tiny exe
  - should we try to automatically remove/restore this when monitoring?

--- Separate task (for Local Service ownership) ---

Misc:
- carefully considered protocol max sizes
- logging
- validate download directory path
- check whether the task successfully started
- check pid of connecting client
- source URL checking, or am I punting on this?
- tests against protocol max size
- stop monitor should close the client's end of the monitor pipe rather than relying exclusively on
  the command succeeding


Task:
- name scheduled task
- description?
- pass log directory, download directory prefix, install path hash as args
  to task (ondemand command-connect etc). Will need escaping. $(Arg0) at the end.
  - how will this work with possibly having different download prefixes later?
  - Different job names?
- pass path to executable as arg to install?
- verify normal user can't modify the job with access we allow
- look into the defaults
  - task: when it should be allowed to run (battery, idleness)
